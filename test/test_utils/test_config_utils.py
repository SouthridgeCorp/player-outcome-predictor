import os
import sys
import pytest

from test.conftest import get_test_cases

#Ensure that modules in the repository root can be referrenced
sys.path.insert(0,
                os.path.abspath(os.path.join(os.path.dirname(__file__),
                                             '..')
                                )
                )


@pytest.mark.parametrize(
    'test_case',
    get_test_cases('utils/config_utils','TestUtilsConstructor'),
    scope='class'
)
class TestUtilsConstructor:
    """Confirms that a utils class object has been created with all required attributes"""

    def test_attributes(self, setup_and_teardown):
        """Checks that every config_utils instance generated by a test_case has the right set of attributed
        injected by config"""

        test_case,config_instance = setup_and_teardown
        for key in ["app",
                    "feedback_form"]:
            assert key in config_instance.config
            if key == "feedback_form":
                for nested_key in ["storage_method",
                                   "storage_path",
                                   "schema"]:
                    assert nested_key in config_instance.config[key]

            if key == "app":
                for nested_key in ["user_personas",
                                   "environment"]:
                    assert nested_key in config_instance.config[key]

    def test_unsupported_storage_methods(self, setup_and_teardown):
        """Asserts failures for unsupported methods"""
        test_case,config_instance = setup_and_teardown
        supported_methods = test_case['feedback_form']['supported_storage_methods']
        if config_instance.config['feedback_form']['storage_method'] not in supported_methods:
            with pytest.raises(Exception) as exc_info:
                config_instance.create_feedback_storage()
            assert "Unsupported" in str(exc_info.value)
        else:
            config_instance.create_feedback_storage()
            feedback_df = config_instance.get_feedback()
            assert feedback_df.shape==(0,len(config_instance.config['feedback_form']['schema']))
            assert True

@pytest.mark.parametrize(
    'test_case',
    get_test_cases('utils/config_utils','TestFeedbackForm'),
    scope='class'
)
class TestFeedbackForm:
    def test_feedback_form(self, setup_create_and_teardown):
        """Asserts that the configured feedback form can be interacted with accurately"""

        test_case, config_instance = setup_create_and_teardown
        config_instance.save_feedback(test_case['feedback_form']['data'])
        feedback = config_instance.get_feedback()
        assert feedback.shape==(1,len(config_instance.config['feedback_form']['schema']))




